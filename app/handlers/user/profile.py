import uuid
import psutil

from app.templates import texts
from app.templates.keyboards import user as nav
from app.database.models import User
from app.utils.payments import PayOk
from app.utils.config import Settings
from app.utils.nudes import NudesAPI, NudesAPIError

from aiogram import Router, Bot, types
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext

from sqlalchemy.ext.asyncio import AsyncSession


async def profile(update: types.Message | types.CallbackQuery, user: User):

    method = (
        update.answer if isinstance(update, types.Message)
        else update.message.edit_text
    )

    await method(
        texts.user.PROFILE % (
            user.id,
            user.balance,
            int(user.balance / 4),
            user.api_key,
        ),
        reply_markup=nav.inline.PROFILE,
    )


async def reset_key(call: types.CallbackQuery, user: User, session: AsyncSession):

    user.api_key = uuid.uuid4()
    await session.commit()

    await call.answer('–ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω!', True)
    await profile(call, user)


async def examples(message: types.Message):

    await message.answer_media_group(
        [
            types.InputMediaPhoto(
                media='https://telegra.ph/file/6a80c45a4f086ca213222.jpg',
                caption='–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ API üëÜ\n\n<i>–í —Å–∏–ª—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π telegram –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ü–µ–Ω–∑—É—Ä–∞</>',
            ),
            types.InputMediaPhoto(
                media='https://telegra.ph/file/682fb12680df05e340fee.jpg',
            ),
            types.InputMediaPhoto(
                media='https://telegra.ph/file/682fb12680df05e340fee.jpg',
            ),
        ],
    )


async def prices(message: types.Message, user: User):
    
    await message.answer(
        texts.user.PRICES % (
            user.balance,
            int(user.balance / 4),
        ),
        reply_markup=nav.inline.PRICES,
    )


async def prices_cb(call: types.CallbackQuery, state: FSMContext, user: User):

    await state.set_state()

    await call.message.edit_text(
        texts.user.PRICES % (
            user.balance,
            int(user.balance / 4),
        ),
        reply_markup=nav.inline.PRICES,
    )


async def buy(call: types.CallbackQuery, state: FSMContext, payment: PayOk):

    amount = call.data.split(':')[1]

    if not amount.isdigit():

        await state.set_state('buy.custom')
        return await call.message.edit_text(
            '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 100—Ä):',
            reply_markup=nav.inline.PRICES_BACK,
        )

    bill = payment.create_bill(int(amount), call.from_user.id)
    await call.message.edit_text(
        '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:',
        reply_markup=nav.inline.bill(bill),
    )


async def buy_custom(message: types.Message, payment: PayOk):

    try:

        amount = int(message.text)

        if amount < 1: 

            raise ValueError

    except ValueError:

        return await message.answer(
            '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–æ—Ç 100—Ä):',
            reply_markup=nav.inline.PRICES_BACK,
        )

    bill = payment.create_bill(amount, message.from_user.id)
    await message.answer(
        '–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:',
        reply_markup=nav.inline.bill(bill),
    )


async def referral(message: types.Message, bot_info: types.User, user: User):

    await message.answer(
        texts.user.REF % (
            bot_info.username,
            user.id,
            user.ref_balance,
        ),
        reply_markup=nav.inline.invite(bot_info.username, user.id),
    )


async def server_status(messsage: types.Message):

    await messsage.answer(
        texts.user.load(
            psutil.cpu_percent(interval=None),
            psutil.virtual_memory(),
        ),
    )


async def pre_demo(message: types.Message, state: FSMContext, user: User):

    await state.set_state('demo.image')
    await message.answer(
        '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–¥–µ—Ç—å. –ó–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º.',
        reply_markup=nav.inline.CANCEL,
    )


async def demo(message: types.Message, state: FSMContext, bot: Bot, user: User, config: Settings):

    if not message.photo:

        return await message.answer(
            '–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!',
            reply_markup=nav.inline.CANCEL,
        )

    await state.set_state()

    msg = await message.answer('–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...')
    file = await bot.get_file(message.photo[-1].file_id)

    try:

        await NudesAPI.create_task(file.file_path, str(user.api_key), user.id, config.webhook.url)

    except NudesAPIError as exc:

        return await msg.edit_text('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: <code>%s</>' % exc.message) 

    await msg.edit_text('–ó–∞–¥–∞—á–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ, ETA - 3 –º–∏–Ω—É—Ç—ã.')


async def cancel(call: types.CallbackQuery, state: FSMContext):

    await state.set_state()
    await call.message.edit_text('‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


def register(router: Router):

    router.message.register(profile, Text('–ü—Ä–æ—Ñ–∏–ª—å'))
    router.callback_query.register(reset_key, Text('reset'))

    router.message.register(examples, Text('–ü—Ä–∏–º–µ—Ä—ã'))

    router.message.register(prices, Text('–¶–µ–Ω—ã'))
    router.callback_query.register(prices_cb, Text('prices'))
    
    router.callback_query.register(buy, Text(startswith='buy:'))
    router.message.register(buy_custom, StateFilter('buy.custom'))

    router.message.register(referral, Text('–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞'))

    router.message.register(server_status, Text('–°—Ç–∞—Ç—É—Å'))

    router.message.register(pre_demo, Text('–î–µ–º–æ'))
    router.message.register(demo, StateFilter('demo.image'))

    router.callback_query.register(cancel, Text('cancel'))
